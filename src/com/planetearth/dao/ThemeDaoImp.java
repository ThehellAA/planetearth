package com.planetearth.dao;

import static com.planetearth.dao.DAOUtility.close;
import static com.planetearth.dao.DAOUtility.initPreparedQuery;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.planetearth.beans.Theme;

public class ThemeDaoImp implements ThemeDao {
    private static final String SQL_SELECT    = "SELECT idTheme, idType, nomTheme, descriptionTheme FROM Theme";
    private static final String SQL_SELECT_ID = "SELECT idTheme, idType, nomTheme, descriptionTheme FROM Theme WHERE idTheme = ?";
    private static final String SQL_INSERT    = "INSERT INTO Theme (idType, nomTheme, descriptionTheme) VALUES (?, ?, ?)";
    private static final String SQL_DELETE    = "DELETE FROM Theme WHERE idTheme = ?";
    private static final String SQL_UPDATE    = "UPDATE Theme SET idType = ?, nomTheme = ?, descriptionTheme = ? WHERE idTheme = ?";

    private DAOFactory          daoFactory;

    public ThemeDaoImp( DAOFactory daoFactory ) {
        this.daoFactory = daoFactory;
    }

    @Override
    public void create( Theme theme ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValue = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = initPreparedQuery( connection, SQL_INSERT, true, theme.getType().getId(),
                    theme.getNom(),
                    theme.getDescription() );
            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la création du thème, aucune ligne ajoutée dans la table." );
            }

            autoGeneratedValue = preparedStatement.getGeneratedKeys();
            if ( autoGeneratedValue.next() ) {
                theme.setId( autoGeneratedValue.getLong( 1 ) );
            } else {
                throw new DAOException( "Échec de la création du thème en base, aucun ID auto-généré retourné." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } catch ( Exception e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    @Override
    public Theme read( Long id, TypeDao typeDao ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet rs = null;
        Theme theme = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = initPreparedQuery( connection, SQL_SELECT_ID, false, id );

            rs = preparedStatement.executeQuery();
            if ( rs.next() ) {
                theme = map( rs, typeDao );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( rs, preparedStatement, connection );
        }

        return theme;
    }

    @Override
    public List<Theme> list( TypeDao typeDao ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet rs = null;
        List<Theme> themes = new ArrayList<Theme>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_SELECT, false );

            rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
                themes.add( map( rs, typeDao ) );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( rs, preparedStatement, connection );
        }

        return themes;
    }

    @Override
    public void delete( Long id ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_DELETE, false, id );

            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la suppression du thème, aucune ligne supprimée de la table." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    @Override
    public void update( Theme theme ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = initPreparedQuery( connection, SQL_UPDATE, false, theme.getType().getId(),
                    theme.getNom(),
                    theme.getDescription(), theme.getId() );
            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la mise a jour du thème, aucune ligne modifier." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } catch ( Exception e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    private static Theme map( ResultSet rs, TypeDao typeDao ) throws SQLException {
        Theme theme = new Theme();

        theme.setType( typeDao.read( rs.getLong( "idType" ) ) );
        theme.setId( rs.getLong( "idTheme" ) );
        theme.setNom( rs.getString( "nomTheme" ) );
        theme.setDescription( rs.getString( "descriptionTheme" ) );

        return theme;
    }
}
