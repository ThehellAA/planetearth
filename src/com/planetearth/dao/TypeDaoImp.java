package com.planetearth.dao;

import static com.planetearth.dao.DAOUtility.close;
import static com.planetearth.dao.DAOUtility.initPreparedQuery;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.planetearth.beans.Type;

public class TypeDaoImp implements TypeDao {
    private static final String SQL_SELECT    = "SELECT idType, nomType, descriptionType FROM Type";
    private static final String SQL_SELECT_ID = "SELECT idType, nomType, descriptionType FROM Type WHERE idType = ?";
    private static final String SQL_INSERT    = "INSERT INTO Type (nomType, descriptionType) VALUES (?, ?)";
    private static final String SQL_DELETE    = "DELETE FROM Type WHERE idType = ?";
    private static final String SQL_UPDATE    = "UPDATE Type SET nomType = ?, descriptionType = ? WHERE idType = ?";

    private DAOFactory          daoFactory;

    public TypeDaoImp( DAOFactory daoFactory ) {
        this.daoFactory = daoFactory;
    }

    @Override
    public void create( Type type ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValue = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = initPreparedQuery( connection, SQL_INSERT, true, type.getNom(),
                    type.getDescription() );
            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la création du type, aucune ligne ajoutée dans la table." );
            }

            autoGeneratedValue = preparedStatement.getGeneratedKeys();
            if ( autoGeneratedValue.next() ) {
                type.setId( autoGeneratedValue.getLong( 1 ) );
            } else {
                throw new DAOException( "Échec de la création du type en base, aucun ID auto-généré retourné." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } catch ( Exception e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    @Override
    public void update( Type type ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = initPreparedQuery( connection, SQL_UPDATE, false, type.getNom(),
                    type.getDescription(), type.getId() );
            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la mise a jour du type, aucune ligne modifier." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } catch ( Exception e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    @Override
    public Type read( Long id ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet rs = null;
        Type type = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = initPreparedQuery( connection, SQL_SELECT_ID, false, id );

            rs = preparedStatement.executeQuery();
            if ( rs.next() ) {
                type = map( rs );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( rs, preparedStatement, connection );
        }

        return type;
    }

    @Override
    public List<Type> list() throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet rs = null;
        List<Type> types = new ArrayList<Type>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_SELECT, false );

            rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
                types.add( map( rs ) );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( rs, preparedStatement, connection );
        }

        return types;
    }

    @Override
    public void delete( Long id ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_DELETE, false, id );

            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la suppression du type, aucune ligne supprimée de la table." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    private static Type map( ResultSet rs ) throws SQLException {
        Type type = new Type();

        type.setId( rs.getLong( "idType" ) );
        type.setNom( rs.getString( "nomType" ) );
        type.setDescription( rs.getString( "descriptionType" ) );

        return type;
    }
}
