package com.planetearth.dao;

import static com.planetearth.dao.DAOUtility.close;
import static com.planetearth.dao.DAOUtility.initPreparedQuery;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import org.joda.time.DateTime;

import com.planetearth.beans.Message;

public class MessageDaoImp implements MessageDao {
    private static final String SQL_SELECT = "SELECT idMessage, email, nomPrenom, adresseEmail, titre, message, date, vu FROM Message";
    private static final String SQL_INSERT = "INSERT INTO Message ( email, nomPrenom, adresseEmail, titre, message, date) VALUES ( ?, ?, ?, ?, ?, ?)";
    private static final String SQL_DELETE = "DELETE FROM Message WHERE idMessage = ?";
    private static final String SQL_UPDATE = "UPDATE Message SET vu = ? WHERE idMessage = ?";

    private DAOFactory          daoFactory;

    public MessageDaoImp( DAOFactory daoFactory ) {
        this.daoFactory = daoFactory;
    }

    @Override
    public void create( Message message ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValue = null;

        try {
            connection = daoFactory.getConnection();

            String email;
            if ( message.getUtilisateur() == null ) {
                email = null;
            } else {
                email = message.getUtilisateur().getEmail();
            }

            preparedStatement = initPreparedQuery( connection, SQL_INSERT, true,
                    email, message.getNomPrenom(), message.getEmail(), message.getTitre(),
                    message.getMessage(), new Timestamp( message.getDate().getMillis() ) );
            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la création du message, aucune ligne ajoutée dans la table." );
            }

            autoGeneratedValue = preparedStatement.getGeneratedKeys();
            if ( autoGeneratedValue.next() ) {
                message.setId( autoGeneratedValue.getLong( 1 ) );
            } else {
                throw new DAOException( "Échec de la création du message en base, aucun ID auto-généré retourné." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } catch ( Exception e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    @Override
    public List<Message> list( UtilisateurDao utilisateurDao ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet rs = null;
        List<Message> messages = new ArrayList<Message>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_SELECT, false );

            rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
                messages.add( map( rs, utilisateurDao ) );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( rs, preparedStatement, connection );
        }

        return messages;
    }

    @Override
    public void delete( Long id ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_DELETE, false, id );

            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la suppression du message, aucune ligne supprimée de la table." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    @Override
    public void update( Message message, boolean vu ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = daoFactory.getConnection();

            message.setVu( vu );

            preparedStatement = initPreparedQuery( connection, SQL_UPDATE, false, message.isVu(), message.getId() );
            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la mise a jour du thème, aucune ligne modifier." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } catch ( Exception e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    private static Message map( ResultSet rs, UtilisateurDao utilisateurDao ) throws SQLException {
        Message message = new Message();

        message.setId( rs.getLong( "idMessage" ) );
        message.setUtilisateur( utilisateurDao.read( rs.getString( "email" ) ) );
        message.setNomPrenom( rs.getString( "nomPrenom" ) );
        message.setEmail( rs.getString( "adresseEmail" ) );
        message.setTitre( rs.getString( "titre" ) );
        message.setMessage( rs.getString( "message" ) );
        message.setDate( new DateTime( rs.getTimestamp( "date" ) ) );
        message.setVu( rs.getBoolean( "vu" ) );

        return message;
    }
}
