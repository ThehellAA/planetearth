package com.planetearth.dao;

import static com.planetearth.dao.DAOUtility.close;
import static com.planetearth.dao.DAOUtility.initPreparedQuery;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.planetearth.beans.Destination;

public class DestinationDaoImp implements DestinationDao {
    private static final String SQL_SELECT      = "SELECT destination, continent FROM Destination ORDER BY continent";
    private static final String SQL_SELECT_PAYS = "SELECT destination, continent FROM Destination WHERE destination = ?";
    private static final String SQL_INSERT      = "INSERT INTO Destination (destination, continent) VALUES (?, ?)";
    private static final String SQL_DELETE      = "DELETE FROM Destination WHERE destination = ?";

    private DAOFactory          daoFactory;

    DestinationDaoImp( DAOFactory daoFactory ) {
        this.daoFactory = daoFactory;
    }

    @Override
    public void create( Destination destination ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = initPreparedQuery( connection, SQL_INSERT, false, destination.getNom(),
                    destination.getContinent() );
            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la création du destination, aucune ligne ajoutée dans la table." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } catch ( Exception e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    @Override
    public Destination read( String nom ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet rs = null;
        Destination destination = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = initPreparedQuery( connection, SQL_SELECT_PAYS, false, nom );

            rs = preparedStatement.executeQuery();
            if ( rs.next() ) {
                destination = map( rs );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( rs, preparedStatement, connection );
        }

        return destination;
    }

    @Override
    public List<Destination> list() throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet rs = null;
        List<Destination> destinations = new ArrayList<Destination>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_SELECT, false );

            rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
                destinations.add( map( rs ) );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( rs, preparedStatement, connection );
        }

        return destinations;
    }

    @Override
    public void delete( String nomDestination ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValue = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_DELETE, false, nomDestination );

            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la suppression du destination, aucune ligne supprimée de la table." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( autoGeneratedValue, preparedStatement, connection );
        }
    }

    private static Destination map( ResultSet rs ) throws SQLException {
        Destination destination = new Destination();

        destination.setNom( rs.getString( "destination" ) );
        destination.setContinent( rs.getString( "continent" ) );

        return destination;
    }
}
